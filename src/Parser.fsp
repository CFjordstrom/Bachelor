%{

let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )

%}

%token <char> CHARLIT
%token PIPE STAR
%token LPAR RPAR
%token SLASH EOF

%left PIPE
%left STAR

%start Start
%type <AbSyn.Regex> Start
%type <AbSyn.Regex> Regex
%type <AbSyn.Concat> Concat
%type <AbSyn.Rep> Rep
%type <AbSyn.Atom> Atom

%%
Start   : SLASH Regex SLASH EOF { $2 }
;

Regex   : Concat { Concat($1) }
        | Regex PIPE Regex { Union($1, $3) }
;

Concat  : Rep { $1 :: [] }
        | Rep Concat { $1 :: $2 }
;

Rep     : Atom { CharAtom($1) }
        | Atom STAR { ZeroOrMore($1) }
;

Atom    : CHARLIT { CharLit($1) }
        | LPAR Regex RPAR { GroupRegex($2) }
;

%%