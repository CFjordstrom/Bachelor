{
module Lexer

open System;;
open FSharp.Text.Lexing;;
open System.Text;;

let mutable currentLine = 1
let mutable lineStartPos = [0]

let rec getLineCol pos line = function
    |  (p1::ps) ->
        if pos>=p1
        then (line, pos-p1)
        else getLineCol pos (line-1) ps
    |  [] -> (0,0) (* should not happen *)

let getPos (lexbuf : LexBuffer<'char>) =
      getLineCol lexbuf.StartPos.pos_cnum
                 (currentLine)
                 (lineStartPos)

exception LexicalError of string * (int * int) (* (message, (line, column)) *)

let lexerError lexbuf s =
     raise (LexicalError (s, getPos lexbuf))

}

rule Token = parse
      [' ' '\t' '\r']+      { Token lexbuf }
    | ['\n' '\012']         { currentLine  <- currentLine + 1;
                            lineStartPos <-  lexbuf.StartPos.pos_cnum
                                             :: lineStartPos;
                            Token lexbuf }
    | '|'                   { Parser.PIPE }
    | '&'                   { Parser.AMPERSAND }
    | '!'                   { Parser.EMARK }
    | '*'                   { Parser.STAR }
    | '+'                   { Parser.PLUS }
    | '?'                   { Parser.QMARK }
    | '('                   { Parser.LPAR }
    | ')'                   { Parser.RPAR }
    | '/'                   { Parser.SLASH }
    | '-'                   { Parser.DASH }
    | '.'                   { Parser.DOT }
    | '['                   { Parser.LBRACKET }
    | ']'                   { Parser.RBRACKET }
    | '^'                   { Parser.CARET }
    | '{'                   { Parser.LCURLY }
    | '}'                   { Parser.RCURLY }
    | ';'                   { Parser.SEMICOLON}
    | "->"                  { Parser.ARROW }
    | '#' ['a'-'z' 'A'-'Z' '0'-'9']+
                            { 
                                let str = Encoding.UTF8.GetString(lexbuf.Lexeme)
                                Parser.NONTERMINAL (str.[1..(String.length str - 1)])
                            }
    | [^ '/' '|' '*' '+' '?' '{' '}' '(' ')' '[' ']' '-' '.' '\\' '#']
                            { 
                                let str = Encoding.UTF8.GetString(lexbuf.Lexeme)
                                Parser.CHARLIT (str.[0])
                            }
    | '\\' [^'a'-'z' 'A'-'Z' '0'-'9']
                            { 
                                let str = Encoding.UTF8.GetString(lexbuf.Lexeme)
                                Parser.CHARLIT (str.[1])
                            }
    | eof                   { Parser.EOF }
    | _                     { lexerError lexbuf "Illegal symbol in input" }